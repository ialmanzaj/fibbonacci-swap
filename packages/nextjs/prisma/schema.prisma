// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth

model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime? @updatedAt
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    // New address
    address       String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    accounts      Account[]
    keys          APIKey[]
    orders        Order[]

    maker Escrow[] @relation("maker")
    taker Escrow[] @relation("taker")
}

model APIKey {
    id        Int       @id @default(autoincrement())
    userId    String
    link      String
    account   String
    bank      String?
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime?
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Order {
    id                   Int       @id @default(autoincrement())
    userId               String
    amountExchange       String
    priceTotalExchange   String
    pricePerCoinExchange String
    minAmountExchange    String
    maxAmountExchange    String
    expires              Int?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime? @updatedAt
    user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Escrow {
    id                 Int       @id @default(autoincrement())
    orderId            Int
    makerId            String
    takerId            String
    escrowStatus       String
    dealAmount         String
    totalPriceExchange String
    deadline           Int?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime? @updatedAt
    maker              User?     @relation("maker", fields: [makerId], references: [id], onDelete: Cascade)
    taker              User?     @relation("taker", fields: [takerId], references: [id], onDelete: Cascade)

    @@index([makerId, takerId])
}
